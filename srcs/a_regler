herdoc 

//$0

//env - i -> ls

//leaks



/* 
int handle_heredoc(const char *delimiter)
{
	pid_t pid;
	char *line = NULL;
	size_t len = 0;
	ssize_t read;
	int pipefd[2];

	if (pipe(pipefd) == -1) {
		perror("pipe");
		return -1;
	}
	pid = fork();
	if (pid == 0)
	{
		signal(SIGINT, sigint_heredoc_handler);
		close(pipefd[0]);
		write(1, "> ", 2);
		while ((read = getline(&line, &len, stdin)) != -1)
		{
			if (line == NULL)
				exit(EXIT_FAILURE);
			if (line[read - 1] == '\n')
				line[read - 1] = '\0';
			if (strcmp(line, delimiter) == 0)
			{
				free(line);
				exit(EXIT_SUCCESS);
			}
			write(pipefd[1], line, strlen(line));
			write(pipefd[1], "\n", 1);
			write(1, "> ", 2);
		}
		free(line);
		close(pipefd[1]);
		exit(EXIT_SUCCESS);
	}
	else
	{
		close(pipefd[1]);
		wait(NULL);
		dup2(pipefd[0], STDIN_FILENO);
		close(pipefd[0]);
	}
	return pipefd[0];
}
 */